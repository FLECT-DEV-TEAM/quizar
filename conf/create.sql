DROP TABLE IF EXISTS QUIZ_USER;
CREATE TABLE QUIZ_USER (
	ID SERIAL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL,
	TWITTER_ID BIGINT NULL,
	TWITTER_SCREEN_NAME VARCHAR(20) NULL,
	FACEBOOK_ID BIGINT NULL,
	FACEBOOK_SCREEN_NAME VARCHAR(20) NULL,
	IMAGE_URL TEXT NOT NULL,
	LAST_LOGIN TIMESTAMP NULL,
	CREATED TIMESTAMP NOT NULL,
	UPDATED TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS QUIZ_ROOM;
CREATE TABLE QUIZ_ROOM (
	ID SERIAL PRIMARY KEY,
	NAME VARCHAR(100) NOT NULL,
	TAGS VARCHAR(100) NULL,
	HASHTAG VARCHAR(20) NULL,
	USER_QUIZ BOOLEAN NOT NULL DEFAULT FALSE,
	DESCRIPTION TEXT NULL,
	OWNER INT NOT NULL,
	ADMIN_USERS TEXT NULL,
	CREATED TIMESTAMP NOT NULL,
	UPDATED TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS QUIZ_EVENT;
CREATE TABLE QUIZ_EVENT (
	ID SERIAL PRIMARY KEY,
	ROOM_ID INT NOT NULL,
	TITLE VARCHAR(100) NULL,
	STATUS SMALLINT NOT NULL DEFAULT 0,
	EXEC_DATE TIMESTAMP NULL,
	END_DATE TIMESTAMP NULL,
	CAPACITY INT NOT NULL,
	PASSCODE VARCHAR(100) NULL,
	DESCRIPTION TEXT NULL,
	CREATED TIMESTAMP NOT NULL,
	UPDATED TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS QUIZ_QUESTION;
CREATE TABLE QUIZ_QUESTION (
	ID SERIAL PRIMARY KEY,
	ROOM_ID INT NOT NULL,
	CREATED_BY INT NOT NULL,
	QUESTION TEXT NOT NULL,
	ANSWERS TEXT NOT NULL,
	ANSWER_TYPE SMALLINT NOT NULL,
	TAGS VARCHAR(100) NULL,
	DESCRIPTION TEXT NULL,
	RELATED_URL VARCHAR(256) NULL,
	PUBLISH_COUNT INT NOT NULL DEFAULT 0,
	CORRECT_COUNT INT NOT NULL DEFAULT 0,
	WRONG_COUNT INT NOT NULL DEFAULT 0,
	CREATED TIMESTAMP NOT NULL,
	UPDATED TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS QUIZ_USER_EVENT;
CREATE TABLE QUIZ_USER_EVENT (
	ID SERIAL PRIMARY KEY,
	USER_ID INT NOT NULL,
	EVENT_ID INT NOT NULL,
	ROOM_ID INT NOT NULL,
	CORRECT_COUNT INT NOT NULL DEFAULT 0,
	WRONG_COUNT INT NOT NULL DEFAULT 0,
	TIME BIGINT NOT NULL DEFAULT 0,
	POINT INT NOT NULL DEFAULT 0,
	CREATED TIMESTAMP NOT NULL,
	UPDATED TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS QUIZ_PUBLISH;
CREATE TABLE QUIZ_PUBLISH (
	ID SERIAL PRIMARY KEY,
	EVENT_ID INT NOT NULL,
	QUESTION_ID INT NOT NULL,
	CORRECT_ANSWER INT NOT NULL,
	ANSWERS_INDEX VARCHAR(10) NOT NULL,
	INCLUDE_RANKING BOOLEAN NOT NULL,
	CREATED TIMESTAMP NOT NULL,
	UPDATED TIMESTAMP NOT NULL
);

DROP TABLE IF EXISTS QUIZ_USER_ANSWER;
CREATE TABLE QUIZ_USER_ANSWER (
	ID SERIAL PRIMARY KEY,
	USER_ID INT NOT NULL,
	PUBLISH_ID INT NOT NULL,
	EVENT_ID INT NOT NULL,
	USER_EVENT_ID INT NOT NULL,
	ANSWER INT NOT NULL,
	STATUS SMALLINT NOT NULL,
	TIME INT NOT NULL,
	CREATED TIMESTAMP NOT NULL,
	UPDATED TIMESTAMP NOT NULL
);

CREATE UNIQUE INDEX UK_QUIZ_PUBLISH ON QUIZ_PUBLISH (EVENT_ID, QUESTION_ID);
CREATE UNIQUE INDEX UK_QUIZ_USER_EVENT ON QUIZ_USER_EVENT (USER_ID, EVENT_ID);
CREATE UNIQUE INDEX UK_QUIZ_USER_ANSWER ON QUIZ_USER_ANSWER (USER_ID, PUBLISH_ID);

DROP VIEW IF EXISTS QUIZ_RANKING;
CREATE VIEW QUIZ_RANKING (
	EVENT_ID,
	USER_ID,
	USERNAME,
	IMAGE_URL,
	CORRECT_COUNT,
	TIME
) AS 
SELECT A.EVENT_ID,
       A.USER_ID,
       U.NAME,
       U.IMAGE_URL,
       SUM(CASE
         WHEN A.STATUS = 1 THEN 1
         WHEN A.STATUS = 2 THEN 0
         WHEN P.CORRECT_ANSWER = A.ANSWER THEN 1
         ELSE 0 END
       ),
       SUM(CASE
         WHEN A.STATUS = 1 THEN A.TIME
         WHEN A.STATUS = 2 THEN 0
         WHEN P.CORRECT_ANSWER = A.ANSWER THEN A.TIME
         ELSE 0 END
       )
  FROM QUIZ_USER_ANSWER A
 INNER JOIN QUIZ_USER U ON (A.USER_ID = U.ID)
 INNER JOIN QUIZ_PUBLISH P ON (A.PUBLISH_ID = P.ID)
 GROUP BY A.EVENT_ID, A.USER_ID, U.NAME, U.IMAGE_URL